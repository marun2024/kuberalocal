[project]
name = "kubera"
version = "0.1.0"
description = "Kubera"
readme = "README.md"
authors = [{ name = "Tony Santopietro", email = "asantopietro@gmail.com" }]
requires-python = ">=3.12"
dependencies = [
    "fastapi>=0.116.1",
    "poethepoet>=0.36.0",
    "pydantic-settings>=2.10.1",
    "python-dotenv>=1.1.1",
    "python-multipart>=0.0.20",
    "uvicorn>=0.35.0",
    "sqlmodel>=0.0.22",
    "asyncpg>=0.30.0",
    "alembic>=1.15.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "httpx>=0.28.1",
    "greenlet>=3.0.0",
    "faker>=33.0.0",
    "email-validator>=2.2.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/backend"]

[tool.poe.tasks]
# Dev workflow tasks
dev = "uvicorn src.backend.main:app --reload --host 0.0.0.0 --port 8000"
test = "pytest"
lint = "ruff check ."
format = "ruff format ."
typecheck = "pyright src"
seed = "python src/backend/cli/seed.py"

# Tenant administration tasks
tenant-init = "python src/backend/cli/tenant_admin.py init"
tenant-create = "python src/backend/cli/tenant_admin.py create"
tenant-list = "python src/backend/cli/tenant_admin.py list"
tenant-status = "python src/backend/cli/tenant_admin.py status"
tenant-delete = "python src/backend/cli/tenant_admin.py delete"
tenant-restore = "python src/backend/cli/tenant_admin.py restore"
tenant-hard-delete = "python src/backend/cli/tenant_admin.py hard-delete"
tenant-list-deleted = "python src/backend/cli/tenant_admin.py list-deleted"
tenant-add-user = "python src/backend/cli/tenant_admin.py add-user"
tenant-list-users = "python src/backend/cli/tenant_admin.py list-users"
tenant-remove-user = "python src/backend/cli/tenant_admin.py remove-user"

[dependency-groups]
dev = [
    "ruff>=0.12.5",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.2",
    "pytest-cov>=6.2.1",
    "faker>=37.5.3",
]

[tool.ruff]
target-version = "py312"
line-length = 88
fix = true

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "SIM",   # flake8-simplify
    "DTZ",   # flake8-datetimez - enforces timezone-aware datetime usage
    "ANN",   # flake8-annotations - enforce type annotations
    "S",     # flake8-bandit - security linting
    "ASYNC", # flake8-async - async/await best practices
    "RUF",   # Ruff-specific rules
    "PERF",  # Perflint - performance anti-patterns
    "PT",    # flake8-pytest-style - pytest best practices
]
ignore = [
    "E501", # line too long (handled by formatter)
    "B008", # do not perform function calls in argument defaults
    "ANN204", # missing return type annotation for special method __init__
    "S105", # possible hardcoded password (too many false positives with enums)
    "S106", # possible hardcoded password in argument (false positive for token_type="bearer")
]
extend-select = [
    "DTZ003", # banned use of datetime.utcnow()
    "DTZ004", # banned use of datetime.utcfromtimestamp()
    "DTZ005", # banned use of datetime.now() without tz
    "DTZ006", # banned use of datetime.fromtimestamp() without tz
    "DTZ007", # banned use of datetime.strptime() without %z
    "DTZ011", # banned use of datetime.date.today()
    "DTZ012", # banned use of datetime.date.fromtimestamp()
]

# Per-file ignores for specific patterns
[tool.ruff.lint.per-file-ignores]
# Allow our utc_now helper function to use datetime.now(UTC)
"src/backend/core/base_models.py" = ["DTZ005"]
# CLI scripts can be more lenient with type annotations and Optional
"src/backend/cli/*.py" = ["ANN201", "ANN001", "ANN002", "ANN003", "RUF013"]
# Core infrastructure functions can be more lenient
"src/backend/core/*.py" = ["ANN201"]
"src/backend/main.py" = ["ANN201"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.pyright]
include = ["src"]
exclude = ["**/__pycache__"]
venvPath = "."
venv = ".venv"
pythonVersion = "3.12"
typeCheckingMode = "basic"
